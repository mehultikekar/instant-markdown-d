#!/bin/sh
':' //; exec "`command -v nodejs || command -v node`" "$0"

var MarkdownIt = require('markdown-it');
var hljs = require('highlight.js');
var url = require('url');
var express = require('express');
var app = express();
var serveStatic = express.static;
var server = require('http').Server(app),
    exec = require('child_process').exec,
    io = require('socket.io').listen(server),
    socket;

server.listen(8090);

var md = new MarkdownIt({
  html: true,
  linkify: true,
  highlight: function(str, lang) {
    if (lang && hljs.getLanguage(lang)) {
      try {
        return hljs.highlight(lang, str).value;
      } catch (err) {
        // Do nothing
      }
    } else {
      return str;
    }
  }
});

function writeMarkdown(input, output) {
  var body = '';
  input.on('data', function(data) {
    body += data;
    if (body.length > 1e6) {
      throw new Error('The request body is too long.');
    }
  });
  input.on('end', function() {
    output.emit('newContent', md.render(body));
  });
}

app.use(serveStatic(process.cwd()))

app.use(serveStatic(__dirname))

app.delete('/', function (req, res) {
  socket.emit('die');
  process.exit();
});

app.put('/', function (req, res) {
  writeMarkdown(req, socket);
  res.writeHead(200);
  res.end();
});

io.on('connection', function(sock){
  socket = sock;
  process.stdout.write('connection established!\n');
  writeMarkdown(process.stdin, socket);
  process.stdin.resume();
});

if (process.platform.toLowerCase().indexOf('darwin') >= 0){
  exec('open -g http://localhost:8090', function(error, stdout, stderr){});
}
else {  // assume unix/linux
  exec('xdg-open http://localhost:8090', function(error, stdout, stderr){});
}
